/* 
   This file is part of the AU.Common library, a set of ActiveX
   controls and C++ classes used to aid in COM and Web development.
   Copyright (C) 2002 Adam Milazzo - http://www.adammil.net

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// Common.idl : IDL source for AU.Common
//

// This file will be processed by the MIDL tool to
// produce the type library (Common.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
  uuid(A553E0A6-F9C3-48C3-98B0-4827C7417E74),
  version(1.0),
  helpstring("AU.Common 1.0")
]
library AU_CommonLib
{
  importlib("stdole2.tlb");
  importlib("msado21.tlb"); // put these where they can be found
  importlib("asp.tlb");

  /* IConfig interface */
  [
    object,
    uuid(C3BC9E26-E130-43CA-906D-25D9CB706597),
    dual,
    nonextensible,
    helpstring("IConfig Interface"),
    pointer_default(unique)
  ]
  interface IConfig : IDispatch
  {
    [propget,id(0)] HRESULT Item([in] BSTR sKey, [in,defaultvalue("")] BSTR sType, [in,defaultvalue("")] BSTR sSection, [out,retval] VARIANT *pvOut);
    [propget,id(1)] HRESULT Exists([in] BSTR sKey, [in,defaultvalue("")] BSTR sSection, [out,retval] VARIANT_BOOL *pbExists);
    [propget,id(2)] HRESULT Section([out,retval] BSTR *psSect);
    [propput,id(2)] HRESULT Section([in] BSTR sSect);
    
    [id(10)] HRESULT OpenXML([in] BSTR sXML);
    [id(11)] HRESULT OpenFile([in] BSTR sPath);
    [id(12)] HRESULT Close();
  };

  /* IDB interface */
  [
    object,
    uuid(FDA8DEE3-9B92-4CD5-B4D7-35EFC10A3F6E),
    dual,
    nonextensible,
    helpstring("IDB Interface"),
    pointer_default(unique)
  ]
  interface IDB : IDispatch
  {
    [propget,id(1)]  HRESULT ConnSection([out,retval] BSTR *psSect);
    [propput,id(1)]  HRESULT ConnSection([in] BSTR sSect);
    [propget,id(2)]  HRESULT ConnKey([out,retval] BSTR *psKey);
    [propput,id(2)]  HRESULT ConnKey([in] BSTR sKey);
    [propget,id(3)]  HRESULT ConnString([out,retval] BSTR *psStr);
    [propput,id(3)]  HRESULT ConnString([in] BSTR sStr);
    [propget,id(4)]  HRESULT CursorType([out,retval] int *pnType);
    [propput,id(4)]  HRESULT CursorType([in] int nType);
    [propget,id(5)]  HRESULT LockType([out,retval] int *pnType);
    [propput,id(5)]  HRESULT LockType([in] int nType);
    [propget,id(6)]  HRESULT Timeout([out,retval] long *pnTimeout);
    [propput,id(6)]  HRESULT Timeout([in] long nTimeout);
    [propget,id(7)]  HRESULT Connection([out,retval] _Connection **ppConn);
    [propget,id(8)]  HRESULT Command([out,retval] _Command **ppCmd);
    [propget,id(9)]  HRESULT IsOpen([out,retval] VARIANT_BOOL *pbOpen);
    [propput,id(10)] HRESULT ParmArray([in] VARIANT vParms);
    [propget,id(11)]  HRESULT Disconnected([out,retval] VARIANT_BOOL *pbDisc);
    [propput,id(11)]  HRESULT Disconnected([in] VARIANT_BOOL bDisc);

    [id(20)] HRESULT Open();
    [id(21)] HRESULT Close();
    [id(22)] HRESULT LockDB();
    [id(23)] HRESULT UnlockDB();
    [id(25)] HRESULT NewCommand([out,retval] _Command **ppCmd);
    [vararg,id(30)] HRESULT Execute([in] BSTR sSQL, [in] SAFEARRAY(VARIANT) *aVals, [out,retval] _Recordset **ppRS);
    [vararg,id(31)] HRESULT ExecuteO([in] BSTR sSQL, [in] BSTR sParms, [in] SAFEARRAY(VARIANT) *aVals, [out,retval] _Recordset **ppRS);
    [vararg,id(32)] HRESULT ExecuteVal([in] BSTR sSQL, [in] SAFEARRAY(VARIANT) *aVals, [out,retval] VARIANT *pvOut);
    [vararg,id(33)] HRESULT ExecuteValO([in] BSTR sSQL, [in] BSTR sParms, [in] SAFEARRAY(VARIANT) *aVals, [out,retval] VARIANT *pvOut);
    [vararg,id(34)] HRESULT ExecuteNR([in] BSTR sSQL, [in] SAFEARRAY(VARIANT) *aVals);
    [vararg,id(35)] HRESULT ExecuteONR([in] BSTR sSQL, [in] BSTR sParms, [in] SAFEARRAY(VARIANT) *aVals);
    [id(40)] HRESULT Output([in] BSTR sParam, [out,retval] VARIANT *pvOut);
  };

  /* IDBMan interface */
  [
    object,
    uuid(5E4184F5-F359-4C09-800B-17EC60DBBD91),
    dual,
    nonextensible,
    helpstring("IDBMan Interface"),
    pointer_default(unique)
  ]
  interface IDBMan : IDispatch
  {
    [propget,id(1)] HRESULT MaxSharing([out,retval] long *pnShares);
    [propput,id(1)] HRESULT MaxSharing([in] long nShares);
    
    [id(10)] HRESULT CreateDB([in,defaultvalue("")] BSTR sKey, [in,defaultvalue("")] BSTR sSect, [out,retval] IDB **ppDB);
    [id(11)] HRESULT CreateDBRaw([in] BSTR sConnStr, [out,retval] IDB **ppDB);
  };

  /* IUtility */
  [
    object,
    uuid(68A4D01C-884B-45AB-B085-ACF5E3B50363),
    dual,
    nonextensible,
    helpstring("IUtility Interface"),
    pointer_default(unique)
  ]
  interface IUtility : IDispatch
  {
    [propget,id(1)]  HRESULT MissingVar([out,retval] VARIANT *pvOut);

    [id(10)] HRESULT StringToBin([in] BSTR sStr, [in,defaultvalue(-1)] VARIANT_BOOL b8bit, [out,retval] VARIANT *pvOut);
    [id(11)] HRESULT BinToString([in] VARIANT vBin, [in,defaultvalue(-1)] VARIANT_BOOL b8bit, [out,retval] BSTR *psRet);
    [id(12)] HRESULT HexToBin([in] BSTR sHex, [out,retval] VARIANT *pvOut);
    [id(13)] HRESULT BinToHex([in] VARIANT vBin, [in,defaultvalue(-1)] VARIANT_BOOL b8bit, [out,retval] BSTR *psHex);
    [id(14)] HRESULT EncodeB64([in] VARIANT vIn, [in,defaultvalue(-1)] VARIANT_BOOL b8bit, [out,retval] BSTR *psB64);
    [id(15)] HRESULT DecodeB64([in] VARIANT vIn, [in,defaultvalue(-1)] VARIANT_BOOL b8bit, [out,retval] VARIANT *pvOut);
    [id(16)] HRESULT HashSHA1([in] VARIANT vIn, [out,retval] VARIANT *pvOut);
    [id(17)] HRESULT CheckSHA1([in] VARIANT vIn, [in] VARIANT vHash, [out,retval] VARIANT_BOOL *pbOK);
    [id(18)] HRESULT VarType([in] VARIANT vIn, [out,retval] short *pnType);
    [id(19)] HRESULT GetTickCount([out,retval] long *pnMS);

    [id(20)] HRESULT LogonUser([in] BSTR sUser, [in] BSTR sPass, [in,defaultvalue("")] BSTR sDomain);
    [id(21)] HRESULT RevertLogin();
  };

  /* IUpFile */
  [
    object,
    uuid(F17B4312-842F-4ACE-85C5-1653A1E859C0),
    dual,
    nonextensible,
    helpstring("IUpFile Interface"),
    pointer_default(unique)
  ]
  interface IUpFile : IDispatch
  {
  	[propget,id(1)] HRESULT FormName([out,retval] BSTR *psName);
  	[propget,id(2)] HRESULT Filename([out,retval] BSTR *psName);
  	[propget,id(3)] HRESULT Length([out,retval] long *pnLen);
  	[propget,id(4)] HRESULT MimeType([out,retval] BSTR *psType);
  	[propget,id(5)] HRESULT Data([out,retval] VARIANT *pvData);
  	[id(6)] HRESULT Save([in] BSTR sPath, [in,defaultvalue(0)] VARIANT_BOOL bCanClobber);
  };

  /* IUpload */
  [
    object,
    uuid(918C90B0-DB9C-4C4B-A0B6-D04DE41A70D2),
    dual,
    nonextensible,
    helpstring("IUpload Interface"),
    pointer_default(unique)
  ]
  interface IUpload : IDispatch
  {
  	[propget,id(0)] HRESULT Form([in] BSTR sKey, [out,retval] VARIANT *pvOut);
  	[propget,id(1)] HRESULT File([in] VARIANT vIndex, [out,retval] IUpFile **ppFile);
  	[propget,id(2)] HRESULT NumFiles([out,retval] long *pnFiles);
  	[propget,id(3)] HRESULT NumFields([out,retval] long *pnFields);
  	[propget,id(4)] HRESULT FieldKey([in] long nIndex, [out,retval] BSTR *psField);

  	[id(10),hidden] HRESULT OnStartPage([in] IDispatch *pDisp);
  };

  /* IAUSession */
  [
	  object,
	  uuid(C253C2DA-7B19-4C71-9E25-2911059CA49E),
	  dual,
	  nonextensible,
	  helpstring("IAUSession Interface"),
	  pointer_default(unique)
  ]
  interface IAUSession : IDispatch
  {
    [propget,id(0)]  HRESULT Item([in] BSTR sKey, [out,retval] VARIANT *pvOut);
    [propput,id(0)]  HRESULT Item([in] BSTR sKey, [in] VARIANT vData);
    [propget,id(1)]  HRESULT SessionID([out,retval] BSTR *psID);
    [propget,id(2)]  HRESULT Section([out,retval] BSTR *psSect);
    [propput,id(2)]  HRESULT Section([in] BSTR sSect);
    [propget,id(3)]  HRESULT Flags([out,retval] long *pnFlags);
    [propput,id(3)]  HRESULT Flags([in] long nFlags);
    [propget,id(4)]  HRESULT Timeout([out,retval] long *pnSecs);
    [propput,id(4)]  HRESULT Timeout([in] long nSecs);
    [propget,id(5)]  HRESULT IsManaged([out,retval] VARIANT_BOOL *pbManaged);
    [propget,id(6)]  HRESULT UsesDB([out,retval] VARIANT_BOOL *pbDB);
    [propput,id(6)]  HRESULT UsesDB([in] VARIANT_BOOL bDB);
    [id(7)]          HRESULT ResetSectEnum();
    [id(8)]          HRESULT ResetKeyEnum([in] BSTR sSect);
    [propget,id(9)]  HRESULT NextSection([out,retval] VARIANT *pvSect);
    [propget,id(10)] HRESULT NextKey([out,retval] VARIANT *pvKey);
    
    [id(20)] HRESULT Clear([in] BSTR sSect);
    [id(21)] HRESULT ClearAll();
    [id(22)] HRESULT Persist([out,retval] BSTR *psID);
    [id(23)] HRESULT Revert();
    [id(24)] HRESULT Save();
    [id(25)] HRESULT Delete();
    [id(26)] HRESULT LockSession();
    [id(27)] HRESULT UnlockSession();
    [id(28)] HRESULT LoadKeysFromDB();
  };

  /* ISessionMan */
  [
	  object,
	  uuid(5E0DB597-EEBF-4D53-8936-F5653302A363),
	  dual,
	  nonextensible,
	  helpstring("ISessionMan Interface"),
	  pointer_default(unique)
  ]
  interface ISessionMan : IDispatch
  {
    [propget,id(1)] HRESULT NumSessions([out,retval] long *pnSess);
    [propget,id(2)] HRESULT Session([in] long nIndex, [out,retval] IAUSession **ppSess);
    [propget,id(3)] HRESULT Current([out,retval] IAUSession **ppSess);

    [id(10)] HRESULT Init([in,defaultvalue("")] BSTR sConfigKey, [in,defaultvalue(0)] long nFlags);
    [id(11)] HRESULT CreateSession([in,defaultvalue(0)] VARIANT_BOOL bPersist, [out,retval] IAUSession **ppSess);
    [id(12)] HRESULT LoadSession([in] BSTR sID, [out,retval] IAUSession **ppSess);
    [id(13)] HRESULT DropSession([in] BSTR sID);

    [id(20)] HRESULT LockMan();
    [id(21)] HRESULT UnlockMan();
  };

  /* IVarArray */
  [
	  object,
	  uuid(980906F5-A686-40B4-A3CE-6E5E6E8AD5CC),
	  dual,
	  nonextensible,
	  helpstring("IVarArray Interface"),
	  pointer_default(unique)
  ]
  interface IVarArray : IDispatch
  {
    [propget,id(0)] HRESULT Item([in] long nIndex, [out,retval] VARIANT *pvOut);
    [propget,id(1)] HRESULT Size([out,retval] long *pnEls);
    [propget,id(2)] HRESULT Capacity([out,retval] long *pnEls);
    [propput,id(2)] HRESULT Capacity([in] long nEls);
    [propget,id(3)] HRESULT Array([out,retval] VARIANT *pvOut);
    [propget,id(4)] HRESULT ArrayCopy([out,retval] VARIANT *pvOut);
    
    [id(10)] HRESULT Add([in] VARIANT vEl);
  };


  /* Config class */
  [
    uuid(18B5A39D-092D-4916-87A5-CF627A34455B),
    helpstring("Config Class")
  ]
  coclass Config
  {
    [default] interface IConfig;
  };

  /* DB class */
  [
    uuid(D406FC81-9412-48BA-BCCD-12EADDBB073A),
    helpstring("DB Class")
  ]
  coclass DB
  {
    [default] interface IDB;
  };

  /* DBMan class */
  [
    uuid(E4FAE717-A310-460D-A30B-E38698E79A45),
    helpstring("DBMan Class")
  ]
  coclass DBMan
  {
    [default] interface IDBMan;
  };

  /* Utility class */
  [
  	uuid(72EDBF5D-48A2-472E-84D9-7FCBF0F3C14B),
  	helpstring("Utility Class")
  ]
  coclass Utility
  {
  	[default] interface IUtility;
  };
  
  /* Upload class */
  [
  	uuid(BC8072FD-3D1A-4576-B88B-A6A694740589),
  	helpstring("Upload Class")
  ]
  coclass Upload
  {
  	[default] interface IUpload;
  };

  /* UpFile class */
  [
  	uuid(CB789D8D-7291-4D7F-AD4C-C423319E4403),
  	helpstring("UpFile Class"),
  	noncreatable
  ]
  coclass UpFile
  {
  	[default] interface IUpFile;
  };

  /* SessionMan */
	[
		uuid(16F97D80-2DA0-4D08-8D87-2B4455D4E743),
		helpstring("SessionMan Class")
	]
	coclass SessionMan
	{
		[default] interface ISessionMan;
	};

  /* Session */
	[
		uuid(1BD35F98-0C34-4512-B84D-2D111725A86E),
		helpstring("AUSession Class")
	]
	coclass AUSession
	{
		[default] interface IAUSession;
	};

  /* VarArray */
	[
		uuid(B31065DA-8CD3-4A97-91D6-B6933105BFD8),
		helpstring("VarArray Class")
	]
	coclass VarArray
	{
		[default] interface IVarArray;
	};
};
