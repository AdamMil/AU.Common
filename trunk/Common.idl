/* 
   This file is part of the AU.Common library, a set of ActiveX
   controls and C++ classes used to aid in COM and Web development.
   Copyright (C) 2002 Adam Milazzo

   This library is free software; you can redistribute it and/or
   modify it under the terms of the GNU Lesser General Public
   License as published by the Free Software Foundation; either
   version 2.1 of the License, or (at your option) any later version.

   This library is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
   Lesser General Public License for more details.

   You should have received a copy of the GNU Lesser General Public
   License along with this library; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
*/

// Common.idl : IDL source for AU.Common
//

// This file will be processed by the MIDL tool to
// produce the type library (Common.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";

[
	uuid(A553E0A6-F9C3-48C3-98B0-4827C7417E74),
	version(1.0),
	helpstring("AU.Common 1.0")
]
library AU_CommonLib
{
  importlib("stdole2.tlb");
  importlib("msado15.dll"); // put these where they can be found
  importlib("asp.tlb");

  /* IConfig interface */
  [
    object,
    uuid(C3BC9E26-E130-43CA-906D-25D9CB706597),
    dual,
    nonextensible,
    helpstring("IConfig Interface"),
    pointer_default(unique)
  ]
  interface IConfig : IDispatch
  {
    [propget,id(0)] HRESULT Item([in] BSTR sKey, [in,defaultvalue("")] BSTR sType, [in,defaultvalue("")] BSTR sSection, [out,retval] VARIANT *pvOut);
    [propget,id(1)] HRESULT Exists([in] BSTR sKey, [in,defaultvalue("")] BSTR sSection, [out,retval] VARIANT_BOOL *pbExists);
    [propget,id(2)] HRESULT Section([out,retval] BSTR *psSect);
    [propput,id(2)] HRESULT Section([in] BSTR sSect);
    
    [id(10)] HRESULT OpenXML([in] BSTR sXML);
    [id(11)] HRESULT OpenFile([in] BSTR sPath);
    [id(12)] HRESULT Close();
  };

  /* IDB interface */
  [
    object,
    uuid(FDA8DEE3-9B92-4CD5-B4D7-35EFC10A3F6E),
    dual,
    nonextensible,
    helpstring("IDB Interface"),
    pointer_default(unique)
  ]
  interface IDB : IDispatch
  {
    [propget,id(1)]  HRESULT ConnSection([out,retval] BSTR *psSect);
    [propput,id(1)]  HRESULT ConnSection([in] BSTR sSect);
    [propget,id(2)]  HRESULT ConnKey([out,retval] BSTR *psKey);
    [propput,id(2)]  HRESULT ConnKey([in] BSTR sKey);
    [propget,id(3)]  HRESULT ConnKey([out,retval] BSTR *psStr);
    [propput,id(3)]  HRESULT ConnKey([in] BSTR sStr);
    [propget,id(4)]  HRESULT CursorType([out,retval] int *pnType);
    [propput,id(4)]  HRESULT CursorType([in] int nType);
    [propget,id(5)]  HRESULT LockType([out,retval] int *pnType);
    [propput,id(5)]  HRESULT LockType([in] int nType);
    [propget,id(6)]  HRESULT Timeout([out,retval] long *pnTimeout);
    [propput,id(6)]  HRESULT Timeout([in] long nTimeout);
    [propget,id(7)]  HRESULT Connection([out,retval] _Connection **ppConn);
    [propget,id(8)]  HRESULT Command([out,retval] _Command **ppCmd);
    [propget,id(9)]  HRESULT IsOpen([out,retval] VARIANT_BOOL *pbOpen);

    [id(20)] HRESULT Open();
    [id(21)] HRESULT Close();
    [id(22)] HRESULT LockDB();
    [id(23)] HRESULT UnlockDB();
    [id(25)] HRESULT NewCommand([out,retval] _Command **ppCmd);
    [vararg,id(30)] HRESULT Execute([in] BSTR sSQL, [in] SAFEARRAY(VARIANT) *aVals, [out,retval] _Recordset **ppRS);
    [vararg,id(31)] HRESULT ExecuteO([in] BSTR sSQL, [in] BSTR sParms, [in] SAFEARRAY(VARIANT) *aVals, [out,retval] _Recordset **ppRS);
    [vararg,id(32)] HRESULT ExecuteVal([in] BSTR sSQL, [in] SAFEARRAY(VARIANT) *aVals, [out,retval] VARIANT *pvOut);
    [vararg,id(33)] HRESULT ExecuteNR([in] BSTR sSQL, [in] SAFEARRAY(VARIANT) *aVals);
    [vararg,id(34)] HRESULT ExecuteONR([in] BSTR sSQL, [in] BSTR sParms, [in] SAFEARRAY(VARIANT) *aVals);
    [id(40)] HRESULT Output([in] BSTR sParam, [out,retval] VARIANT *pvOut);
  };

  /* IDBMan interface */
  [
    object,
    uuid(5E4184F5-F359-4C09-800B-17EC60DBBD91),
    dual,
    nonextensible,
    helpstring("IDBMan Interface"),
    pointer_default(unique)
  ]
  interface IDBMan : IDispatch
  {
    [propget,id(1)] HRESULT MaxSharing([out,retval] long *pnShares);
    [propput,id(1)] HRESULT MaxSharing([in] long nShares);
    
    [id(10)] HRESULT CreateDB([in,defaultvalue("")] BSTR sKey, [in,defaultvalue("")] BSTR sSect, [out,retval] IDB **ppDB);
    [id(11)] HRESULT CreateDBRaw([in] BSTR sConnStr, [out,retval] IDB **ppDB);
  };


  /* Config class */
  [
    uuid(18B5A39D-092D-4916-87A5-CF627A34455B),
    helpstring("Config Class")
  ]
  coclass Config
  {
    [default] interface IConfig;
  };

  /* DB class */
  [
    uuid(D406FC81-9412-48BA-BCCD-12EADDBB073A),
    helpstring("DB Class")
  ]
  coclass DB
  {
    [default] interface IDB;
  };

  /* DBMan class */
  [
    uuid(E4FAE717-A310-460D-A30B-E38698E79A45),
    helpstring("DBMan Class")
  ]
  coclass DBMan
  {
    [default] interface IDBMan;
  };
};
